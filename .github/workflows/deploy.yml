name: Deploy
on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run linter
        run: pnpm lint

      - name: Run type check
        run: pnpm type-check

      - name: Run tests
        run: pnpm test

  build:
    needs: test
    runs-on: ubuntu-latest
    env:
      NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
      NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build
        run: pnpm build --frozen-lockfile

  deploy:
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    env:
      NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
      NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
      VERCEL_PROJECT_ID: prj_ZcvIEwYIBFQBfbJafOjGuc2THSbA
      VERCEL_DEPLOY_HOOK: MRewLE6RLO
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build
        run: pnpm build --frozen-lockfile

      - name: Trigger Vercel Deployment
        id: deploy
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        run: |
          DEPLOY_RESPONSE=$(curl -X POST \
            -H "Authorization: Bearer $VERCEL_TOKEN" \
            "https://api.vercel.com/v1/integrations/deploy/$VERCEL_PROJECT_ID/$VERCEL_DEPLOY_HOOK")
          JOB_ID=$(echo $DEPLOY_RESPONSE | jq -r '.job.id')
          echo "job_id=$JOB_ID" >> $GITHUB_OUTPUT

      - name: Monitor Deployment
        env:
          JOB_ID: ${{ steps.deploy.outputs.job_id }}
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        run: |
          echo "Monitoring deployment job: $JOB_ID"
          MAX_ATTEMPTS=30
          ATTEMPT=0

          while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
            RESPONSE=$(curl -H "Authorization: Bearer $VERCEL_TOKEN" \
              "https://api.vercel.com/v1/deployments/$JOB_ID")
            
            STATE=$(echo $RESPONSE | jq -r '.state')
            echo "Deployment state: $STATE"
            
            if [ "$STATE" = "READY" ]; then
              URL=$(echo $RESPONSE | jq -r '.url')
              echo "Deployment successful! URL: $URL"
              exit 0
            elif [ "$STATE" = "ERROR" ]; then
              echo "Deployment failed!"
              exit 1
            fi
            
            ATTEMPT=$((ATTEMPT + 1))
            sleep 10
          done

          echo "Deployment timed out after $MAX_ATTEMPTS attempts"
          exit 1

      - name: Notify on Success
        if: success()
        run: |
          echo " Deployment successful!"
          echo "Visit: https://crm7.vercel.app"

      - name: Notify on Failure
        if: failure()
        run: |
          echo " Deployment failed!"
