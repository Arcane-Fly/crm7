# yaml-language-server: $schema=../.github/workflow-schemas/deploy.json
name: Deploy

# Define permissions explicitly for security
permissions:
  contents: read
  deployments: write
  pull-requests: write
  actions: read
  security-events: write

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main]
    types: [opened, synchronize]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    environment: production
    env:
      NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
      NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      DIRECT_URL: ${{ secrets.DIRECT_URL }}
      
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
          ref: ${{ github.event.pull_request.base.ref || github.ref_name }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v4
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        env:
          NPM_CONFIG_AUDIT: false
          NPM_CONFIG_FUND: false

      - name: Run linter
        run: pnpm lint

      - name: Run type check
        run: pnpm type-check

      - name: Run Tests
        run: pnpm test
        env:
          NODE_ENV: test
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}

  security:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          
      - name: Run security scan
        uses: github/codeql-action/init@v3
        with:
          languages: javascript
          
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:javascript"

  build:
    needs: [test, security]
    runs-on: ubuntu-latest
    environment: production
    outputs:
      preview_url: ${{ steps.vercel-deploy.outputs.preview_url }}
      
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        env:
          NPM_CONFIG_AUDIT: false
          NPM_CONFIG_FUND: false

      - name: Build
        run: pnpm build --frozen-lockfile
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          DIRECT_URL: ${{ secrets.DIRECT_URL }}

  deploy:
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    environment: production
    concurrency: 
      group: production
      cancel-in-progress: false
    
    steps:
      - name: Deploy to Production
        id: deploy
        uses: actions/github-script@v7
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        with:
          script: |
            const result = await exec.getExecOutput('vercel', [
              '--prod',
              '--token',
              process.env.VERCEL_TOKEN,
              '--yes'
            ]);
            console.log(result.stdout);
            return result.stdout;

      - name: Comment Deployment URL
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `âœ… Production deployment complete`
            })

      - name: Notify on Success
        if: success()
        run: |
          echo " Deployment successful!"
          echo "Visit: https://crm7.vercel.app"

      - name: Notify on Failure
        if: failure()
        run: |
          echo " Deployment failed!"
